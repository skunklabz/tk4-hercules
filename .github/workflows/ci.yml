name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Linting and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install shellcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
    
    - name: Run shellcheck on scripts
      run: |
        echo "üîç Running shellcheck on shell scripts..."
        find scripts/ -name "*.sh" -type f -exec shellcheck {} \; || {
          echo "‚ö†Ô∏è  Some shell scripts have linting issues. Please review and fix."
          exit 1
        }
    
    - name: Check script permissions
      run: |
        echo "üîê Checking script permissions..."
        for script in scripts/**/*.sh; do
          if [ -f "$script" ]; then
            if [ ! -x "$script" ]; then
              echo "‚ùå Script $script is not executable"
              exit 1
            else
              echo "‚úÖ $script is executable"
            fi
          fi
        done
    
    - name: Validate YAML files
      run: |
        echo "üìã Validating YAML files..."
        # Check docker-compose.yml
        docker compose config
        
        # Check GitHub workflow files
        for file in .github/workflows/*.yml; do
          echo "Validating $file"
          python3 -c "import yaml; yaml.safe_load(open('$file'))"
        done
    
    - name: Check Makefile
      run: |
        echo "üîß Testing Makefile..."
        make help
    
    - name: Validate documentation structure
      run: |
        echo "üìö Validating documentation structure..."
        # Check if all required documentation files exist
        required_docs=(
          "README.md"
          "CONTRIBUTING.md"
          "CHANGELOG.md"
          "LICENSE"
          "SECURITY.md"
          "CODE_OF_CONDUCT.md"
          "docs/LEARNING_GUIDE.md"
          "docs/TESTING.md"
        )
        
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "‚ùå Required documentation file missing: $doc"
            exit 1
          else
            echo "‚úÖ $doc exists"
          fi
        done
    
    - name: Check project structure
      run: |
        echo "üìÅ Validating project structure..."
        # Verify directory structure
        required_dirs=(
          "scripts/build"
          "scripts/test"
          "scripts/validation"
          "docs"
          "examples"
          ".github/ISSUE_TEMPLATE"
          ".github/workflows"
        )
        
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "‚ùå Required directory missing: $dir"
            exit 1
          else
            echo "‚úÖ $dir exists"
          fi
        done
        
        # Check for pull request template (can be file or directory)
        if [ ! -f ".github/PULL_REQUEST_TEMPLATE.md" ] && [ ! -d ".github/PULL_REQUEST_TEMPLATE" ]; then
          echo "‚ùå Required pull request template missing (neither .github/PULL_REQUEST_TEMPLATE.md nor .github/PULL_REQUEST_TEMPLATE/ found)"
          exit 1
        else
          echo "‚úÖ Pull request template exists"
        fi
    
    - name: Check for TODO comments
      run: |
        echo "üìù Checking for TODO comments..."
        if grep -r "TODO" . --exclude-dir=.git --exclude-dir=.github --exclude-dir=.cursor; then
          echo "‚ö†Ô∏è  TODO comments found. Please address them before merging."
          exit 1
        fi

  test:
    name: Testing
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: tk4-hercules:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
    
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    
    - name: Run quick validation
      run: |
        echo "üîç Running quick validation..."
        chmod +x scripts/validation/*.sh
        ./scripts/validation/quick-validate.sh
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run quick tests
      run: |
        echo "üß™ Running quick validation tests..."
        # Only run basic validation, not full container tests
        chmod +x scripts/validation/*.sh
        ./scripts/validation/quick-validate.sh
        
        # Check if Dockerfile builds successfully
        echo "üî® Testing Docker build..."
        docker build -t tk4-hercules:ci-test .
        
        # Clean up test image
        docker rmi tk4-hercules:ci-test
      timeout-minutes: 10
    
    - name: Test Docker container startup
      run: |
        echo "üê≥ Testing container startup (quick check)..."
        # Just verify docker-compose.yml is valid
        docker compose config
        
        echo "‚úÖ Docker Compose configuration is valid"
    
    - name: Test Makefile commands
      run: |
        echo "üîß Testing Makefile commands..."
        make test-quick
        make validate
        make lint

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check for secrets in code
      run: |
        echo "üîí Checking for potential secrets in code..."
        # Check for common secret patterns, excluding documentation and known safe patterns
        if grep -r -i "password\|secret\|key\|token" . \
          --exclude-dir=.git \
          --exclude-dir=.github \
          --exclude-dir=.cache \
          --exclude=*.md \
          --exclude=*.mdc \
          --exclude=Makefile \
          --exclude=docker-compose.yml \
          --exclude=Dockerfile \
          --exclude=*.sh \
          --exclude=.gitignore \
          | grep -v -E "(CUL8TR|PASS4U|GITHUB_TOKEN|write:packages|password-stdin|Tur\(n\)key|MVS|OS/VS2|Alpine|Hercules|mainframe|emulator|tk4-hercules|skunklabz|ghcr\.io)"; then
          echo "‚ö†Ô∏è  Potential secrets found. Please review the code."
          exit 1
        fi
        echo "‚úÖ No suspicious secrets found in code"

  documentation:
    name: Documentation Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check markdown links
      run: |
        echo "üîó Checking markdown links..."
        # Install markdown-link-check if available
        if command -v markdown-link-check >/dev/null 2>&1; then
          find . -name "*.md" -exec markdown-link-check {} \;
        else
          echo "markdown-link-check not available, skipping link validation"
        fi
    
    - name: Validate CHANGELOG format
      run: |
        echo "üìù Validating CHANGELOG format..."
        if [ -f "CHANGELOG.md" ]; then
          # Check for proper date format (YYYY-MM-DD)
          if grep -q "^## \[.*\] - [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}" CHANGELOG.md; then
            echo "‚úÖ CHANGELOG has proper date format"
          else
            echo "‚ùå CHANGELOG missing proper date format"
            exit 1
          fi
        fi
    
    - name: Check for broken links in documentation
      run: |
        echo "üîç Checking for broken links..."
        # Simple check for common broken link patterns
        if grep -r "http://localhost\|http://127.0.0.1" docs/ examples/; then
          echo "‚ö†Ô∏è  Found localhost links in documentation"
          exit 1
        fi 