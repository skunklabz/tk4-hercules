name: Release

on:
  push:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get current version
      id: version
      run: |
        CURRENT_VERSION=$(cat VERSION | tr -d ' ')
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
    
    - name: Determine new version
      id: new_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
        else
          # For main branch pushes, bump patch version
          VERSION_TYPE="patch"
        fi
        
        CURRENT_VERSION="${{ steps.version.outputs.current_version }}"
        
        case $VERSION_TYPE in
          "major")
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1".0.0"}')
            ;;
          "minor")
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
            ;;
          "patch")
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
            ;;
        esac
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Update VERSION file
      run: |
        echo "${{ steps.new_version.outputs.new_version }}" > VERSION
        echo "Updated VERSION file to ${{ steps.new_version.outputs.new_version }}"
    
    - name: Update CHANGELOG
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        TODAY=$(date +%Y-%m-%d)
        
        # Move unreleased changes to new version
        sed -i "s/## \[Unreleased\]/## \[$NEW_VERSION\] - $TODAY\n\n## [Unreleased]/" CHANGELOG.md
        
        echo "Updated CHANGELOG.md for version $NEW_VERSION"
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push to GitHub Container Registry
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/skunklabz/tk4-hercules:latest
          ghcr.io/skunklabz/tk4-hercules:${{ steps.new_version.outputs.new_version }}
          ghcr.io/skunklabz/tk4-hercules:main
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create Git tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add VERSION CHANGELOG.md
        git commit -m "chore: bump version to ${{ steps.new_version.outputs.new_version }}"
        git tag -a "v${{ steps.new_version.outputs.new_version }}" -m "Release v${{ steps.new_version.outputs.new_version }}"
        git push origin HEAD:${{ github.ref }}
        git push origin "v${{ steps.new_version.outputs.new_version }}"
    
    - name: Create Release Notes
      id: release_notes
      run: |
        # Extract changes from CHANGELOG.md for the new version
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        RELEASE_NOTES=$(awk "/## \[$NEW_VERSION\]/,/## \[/" CHANGELOG.md | head -n -1 | tail -n +2)
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.new_version.outputs.new_version }}
        release_name: Release v${{ steps.new_version.outputs.new_version }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: false
    
    - name: Run post-release tests
      run: |
        echo "Running post-release validation..."
        ./scripts/validation/quick-validate.sh
        
        echo "‚úÖ Release v${{ steps.new_version.outputs.new_version }} created successfully!"
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.new_version.outputs.new_version }}"
        echo "üê≥ Docker Image: ghcr.io/skunklabz/tk4-hercules:${{ steps.new_version.outputs.new_version }}" 